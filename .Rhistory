y_test
nn <- neuralnet(GasolNaBomba~Dolar+CtBarril + PCTribEst +Etanol+ IPCA+EstEmp + CDI+
IBC,
data = scaled_train,
hidden =  5,
linear.output = TRUE,
lifesign = 'full',
rep=1)
#rede
plot(nn)
#pesos
nn$result.matrix
# Predict
pr.nn <- compute(nn,scaled_test)
pr.nn
#revertendo o scale
result<-pr.nn$net.result*(max(training$GasolNaBomba) - min(training$GasolNaBomba) ) + min(training$GasolNaBomba)
result
test <- df_final[25:28,]
training <- df_final[1:24,]
training
test <- df_final[25:28,]
test
df_ts
df_final[24,"CDI"]
df_final[25,"CDI"]
#separando em treino e Teste
training <- df_final[1:24,]
test <- df_final[25:28,]
#scaling train
maxs <- apply(training, 2, max)
mins <- apply(training, 2, min)
scaled_train <- as.data.frame(scale(training, center = mins, scale = maxs - mins))
#scaling test
scaled_test <- as.data.frame(scale(test, center = mins, scale = maxs - mins))
n <- names(training)
f <- as.formula(paste("GasolNaBomba ~", paste(n[!n %in% ["GasolNaBomba",]], collapse = " + "))) #equacao
nn <- neuralnet(GasolNaBomba~Dolar+CtBarril + PCTribEst +Etanol+ IPCA+EstEmp + CDI+
IBC,
data = scaled_train,
hidden =  5,
linear.output = TRUE,
lifesign = 'full',
rep=1)
#rede
plot(nn)
#pesos
nn$result.matrix
# Predict
pr.nn <- compute(nn,scaled_test)
#revertendo o scale
result<-pr.nn$net.result*(max(training$GasolNaBomba) - min(training$GasolNaBomba) ) + min(training$GasolNaBomba)
#avaliacao
MAPE(result, y_test) * 100 #
result
test
test <- df_final[25:28,]
#revertendo o scale
result<-pr.nn$net.result*(max(training$GasolNaBomba) - min(training$GasolNaBomba) ) + min(training$GasolNaBomba)
#avaliacao
MAPE(result, y_test) * 100 #
result
y_test
MAPE(result, test[,"GasolNaBomba"]) * 100 #
result_ts<- ts(result, start = c(2020,08), end=c(2020,10, freq=12)
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Rede Neural", type='l')
lines( result_ts, col="red", lwd=2)
y_test
x_train
m0 <- mean(y_train)
f_mean <- ts(rep(m0, each=3),start =c(2020,07), end=c(2020,10), freq=12)
MAPE(f_mean, y_test) * 100 #3.24 % de erro
#media simples
m0 <- mean(y_train)
f_mean <- ts(rep(m0, each=4),start =c(2020,07), end=c(2020,10), freq=12)
MAPE(f_mean, y_test) * 100 #3.24 % de erro
#### 1.Modelo naive simples (BASE LINE)
naive = snaive(y_train, h=4)
#avaliacao
MAPE(naive$mean, y_test) * 100 #2.44% de erro
#plot
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Seasonal Naive Forecast", type='l')
lines(naive$mean, col="red", lwd=2)
MAPE(naive$mean, y_test) * 100 #2.44% de erro
y_test
#variavel endogena
y_train <- ts(as.vector(training[, c("GasolNaBomba")]))
y_train <- ts(y_train, start =c(2018,07), end=c(2020,06), freq=12)
y_test <- ts(as.vector(test[, c("GasolNaBomba")]))
y_test <- ts(y_test, start = c(2020,07), end=c(2020,10), freq=12)
#### 1.Modelo naive simples (BASE LINE)
naive = snaive(y_train, h=4)
#avaliacao
MAPE(naive$mean, y_test) * 100 #2.44% de erro
#plot
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Seasonal Naive Forecast", type='l')
lines(naive$mean, col="red", lwd=2)
#media simples
m0 <- mean(y_train)
f_mean <- ts(rep(m0, each=4),start =c(2020,07), end=c(2020,10), freq=12)
MAPE(f_mean, y_test) * 100 #3.24 % de erro
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Media Simples", type='l')
lines(f_mean, col="red", lwd=2)
#iniciando a variavel
m <- 0
m[0] <- MAPE(f_mean, y_test) * 100 #
for(k in 1:12) {
print(cat("modelo ",k,"\n"))
print(MAPE(forecast(sma(y_train ,order = k ,h=3, silent=FALSE),h = 3)$mean,y_test)*100)
m[k] <-MAPE(forecast(sma(y_train ,order = k ,h=3, silent=FALSE),h = 3)$mean,y_test)*100
}
for(k in 1:12) {
print(cat("modelo ",k,"\n"))
print(MAPE(forecast(sma(y_train ,order = k ,h=4, silent=FALSE),h = 4)$mean,y_test)*100)
m[k] <-MAPE(forecast(sma(y_train ,order = k ,h=4, silent=FALSE),h = 4)$mean,y_test)*100
}
# melhor modelo SMA(12)  MAPE 1.352%
m12 <-  forecast(sma(y_train ,order = 12 ,h=4, silent=FALSE),h = 4)
plot(m12)
# melhor modelo SMA(12)  MAPE 1.352%
m12 <-  forecast(sma(y_train ,order = 12 ,h=4, silent=FALSE),h = 4)
plot(m12)
m12 <-  forecast(sma(y_train ,order = 12 ,h=4, silent=FALSE),h = 4)
plot(m12)
a
plot(m12)
#plot FIT
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Modelo média móvel Doze periodos - Fit(vermelho)", type='l')
lines(sma(y_train ,order = 12 ,h=4, silent=FALSE), col="red", lwd=2)
# melhor modelo SMA(12)  MAPE 1.352%
m12 <-  forecast(sma(y_train ,order = 12 ,h=4, silent=FALSE),h = 4)
plot(m12)
#plot PREVISAO
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Modelo média móvel nove periodos", type='l')
lines(m9$mean, col="red", lwd=2)
m12 <-  forecast(sma(y_train ,order = 12 ,h=4, silent=FALSE),h = 4)
m12
plot(m12)
MAPE(forecast(sma(y_train ,order = 12 ,h=4, silent=FALSE),h = 4)$mean,y_test)*100  # MAPE 1.04%
#treino
ets_model = ets(y_train, allow.multiplicative.trend = TRUE)
summary(ets_model)
#avaliacao
ets_forecast = forecast(ets_model, h=4)
MAPE(ets_forecast$mean, y_test) *100  # 5.40  % erro
#plot FIT
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Lts Model - FIT (vermelho)", type='l')
lines(ets_forecast$fitted, col="red", lwd=2)
#plot PREVISAO
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Lts Model", type='l')
lines(ets_forecast$mean, col="red", lwd=2)
####  4 Regressão Linear Múltipla
regressao=step(lm(GasolNaBomba~. , data = training),direction = 'backward')
summary(regressao)
#modelo com coeficientes significativos  sem o preco do produtor que estava deixando R2 1
regressao_2 = step(lm(GasolNaBomba~Dolar+CtBarril + PCTribEst +Etanol+ IPCA+EstEmp + CDI+
IBC, data = training),direction = 'backward') #Create the linear regression
summary(regressao_2)
regressao=step(lm(GasolNaBomba~. , data = training),direction = 'backward')
summary(regressao)
regressao_2 = step(lm(GasolNaBomba~Dolar+CtBarril + PCTribEst +Etanol+ IPCA+EstEmp + CDI+
IBC, data = training),direction = 'backward') #Create the linear regression
summary(regressao_2)
#avaliacao
lm_forecast = forecast(regressao_2,  h = 3)
MAPE(lm_forecast[1:4],  test$GasolNaBomba) *100   # % erro   #5.036368
y_heat<-predict(regressao_2, newdata = test[ , names(test) != "GasolNaBomba"])
y_heat <- ts(y_heat, start = c(2018,07), end=c(2020,10), freq=12)
y_2 <- ts(model$fitted.values, start = c(2018,07), end=c(2020,10), freq=12)
#plot Fit
#avaliacao
lm_forecast = forecast(regressao_2,  h = 4)
MAPE(lm_forecast[1:4],  test$GasolNaBomba) *100   # % erro   #5.036368
y_heat<-predict(regressao_2, newdata = test[ , names(test) != "GasolNaBomba"])
y_heat <- ts(y_heat, start = c(2018,07), end=c(2020,10), freq=12)
y_2 <- ts(model$fitted.values, start = c(2018,07), end=c(2020,10), freq=12)
#plot Fit
plot(training[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Modelo Regressão Linear Múltipla - Fitted", type='l')
lines(model$fitted.values,  col="red", lwd=2)
#plot previsao
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Modelo Regressão Linear Múltipla - Previsto vs Realizado", type='l')
lines(y_2,  col="red", lwd=2)
###### 5.1  modelo Arima (2,0,0)
auto <- auto.arima(y_train)
summary(auto)
coeftest(auto)
summary(auto)
arima.forecast = forecast(auto,  3)
MAPE(arima.forecast$pred, y_test) *100  # 9.98%
arima.forecast = forecast(auto,  4)  #  treino 1.68
arima.forecast = forecast(auto,  4)  #  treino 1.68
MAPE(arima.forecast$pred, y_test) *100  # 9.98%
accuracy(auto)
accuracy(auto)
# plot previstos
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Previsao do preco da gasolina com ARIMA previsão", type='l')
lines(arima.forecast$pred,    col="red", lwd=2)
# Checando normalidade ods residuos
checkresiduals(auto)
###### 5.2  Modelo Arimax com regressores
auto2 <- auto.arima(y_train, xreg=x_train)
summary(auto2)
coeftest(auto2)
#verificando coeficientes
coefficients(auto2)
summary(auto2)
#verificando coeficientes
coefficients(auto2)
arima2.forecast = forecast(auto2,  newxreg=auto2$xreg, n=3)#  treino 0.25%
arima2.forecast = forecast(auto2,  newxreg=auto2$xreg, n=4)#  treino 0.25%
MAPE(arima2.forecast$pred[1:3], y_test) *100  # 6.58 %
MAPE(arima2.forecast$pred[1:4], y_test) *100  # 6.58 %
pred[1:4]
arima2.forecast$pred[1:4]
y_test
#previsto no periodo teste
x <-ts(arima2.forecast$pred[1:3], start= c(2020,07), frequency = 12)
# plot previstos
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Previsao do preco da gasolina com ARIMA + regressores - Previsto", type='l')
lines(x , col="red", lwd=2)
# hipotese nulo de que a autocorrelação é diferente de zero.
Box.test(auto2$residuals, type = "Ljung-Box") #p valor alto indica que altocorrelacao é igual a zero
# Checando normalidade ods residuos
checkresiduals(auto)
n <- names(training)
setwd('D:\\Trabalho_Bloco_A')
#Bibliotecas
library(tseries)
library(tidyverse)
library(urca)
library(MLmetrics)#Avaliacao do Modelo
#Leitura e divisão de dados
#importando o dataframe
df_final <-read.csv('df_brasil.csv')
df_final=df_final[-c(1,6,7)]
#plotando variaveis
df_ts<-ts(df_final, start = c(2018,07), end=c(2020,10), freq=12)
autoplot( df_ts, facets=TRUE) +
xlab("Year") + ylab("") +
ggtitle("Variáveis economicas e o Preço da Gasolina")
# divisão treino e teste
#separando em treino e Teste
training <- df_final[1:24,]  #c(2018,07), end=c(2020,06)
test <- df_final[25:28,]     #start = c(2020,07), end=c(2020,10)
#variavel endogena
y_train <- ts(as.vector(training[, c("GasolNaBomba")]))
y_train <- ts(y_train, start =c(2018,07), end=c(2020,06), freq=12)
y_test <- ts(as.vector(test[, c("GasolNaBomba")]))
y_test <- ts(y_test, start = c(2020,07), end=c(2020,10), freq=12)
training
#variavel exogena
x_train <- training  %>% select(Dolar,CtBarril,Etanol,GasolProdr,PIM, IPCA,CDI, EstEmp,DistrRev,MRed,IBC)
x_train <- ts(as.vector(x_train))
x_train <- ts(x_train, start = c(2018,07), end=c(2020,06), freq=12)
x_test <- subset(test, select = cbind('Dolar','CtBarril','Etanol','GasolProdr','PIM', 'IPCA','CDI', 'EstEmp','DistrRev','MRed','IBC'))
x_test <- ts(as.vector(x_test))
x_test <- ts(x_test,  start = c(2020,07), end=c(2020,10), freq=12)
library(keras)
library(mlbench)
library(dplyr)
library(magrittr)
library(neuralnet)
#scaling train
maxs <- apply(training, 2, max)
mins <- apply(training, 2, min)
scaled_train <- as.data.frame(scale(training, center = mins, scale = maxs - mins))
#scaling test
scaled_test <- as.data.frame(scale(test, center = mins, scale = maxs - mins))
seed(10)
n <- names(training)
nn <- neuralnet(GasolNaBomba~Dolar+CtBarril + PCTribEst +Etanol+ IPCA+EstEmp + CDI+
IBC,
data = scaled_train,
hidden =  6,
linear.output = TRUE,
lifesign = 'full',
rep=30)
#rede
plot(nn)
#pesos
nn$result.matrix
#revertendo o scale
result<-pr.nn$net.result*(max(training$GasolNaBomba) - min(training$GasolNaBomba) ) + min(training$GasolNaBomba)
result
result<-pr.nn$net.result*(max(training$GasolNaBomba) - min(training$GasolNaBomba) ) + min(training$GasolNaBomba)
pr.nn <- compute(nn,scaled_test )
result<-pr.nn$net.result*(max(training$GasolNaBomba) - min(training$GasolNaBomba) ) + min(training$GasolNaBomba)
result
nn.forecast =  MAPE(result, test[,"GasolNaBomba"]) * 100 # 0.25%
accuracy(auto2)
result
nn.forecast =  MAPE(result, test[,"GasolNaBomba"]) * 100 # 0.25%
accuracy(auto2)
MAPE(result, y_test) *100  # 1.41%
library(keras)
library(mlbench)
library(dplyr)
library(magrittr)
library(neuralnet)
#scaling train
maxs <- apply(training, 2, max)
mins <- apply(training, 2, min)
scaled_train <- as.data.frame(scale(training, center = mins, scale = maxs - mins))
#scaling test
scaled_test <- as.data.frame(scale(test, center = mins, scale = maxs - mins))
n <- names(training)
nn <- neuralnet(GasolNaBomba~Dolar+CtBarril + PCTribEst +Etanol+ IPCA+EstEmp + CDI+
IBC,
data = scaled_train,
hidden =  6,
linear.output = TRUE,
lifesign = 'full',
rep=100)
plot(nn)
nn$result.matrix
# Predict
pr.nn <- compute(nn,scaled_test )
#revertendo o scale
result<-pr.nn$net.result*(max(training$GasolNaBomba) - min(training$GasolNaBomba) ) + min(training$GasolNaBomba)
result
#avaliacao
nn.forecast =  MAPE(result, test[,"GasolNaBomba"]) * 100 # 0.25%
accuracy(auto2)
MAPE(result, y_test) *100  # 1.41%
nn.forecast =  MAPE(result, test[,"GasolNaBomba"]) * 100
accuracy(auto2)
accuracy(result)
summary(result)
(result)
pr.nn
out <- cbind(nn$covariate,
+ nn$net.result[[1]])
out
dimnames(out) <- list(NULL,
+ c("age","parity","induced",
+ "spontaneous","nn-output"))
nn.bp <- neuralnet(GasolNaBomba~Dolar+CtBarril + PCTribEst +Etanol+ IPCA+EstEmp + CDI+
IBC,
data = scaled_train,
hidden =  6,
err.fct="ce",
linear.output = TRUE,
algorithm="backprop",
learningrate=0.01,
rep=100)
nn.bp <- neuralnet(GasolNaBomba~Dolar+CtBarril + PCTribEst +Etanol+ IPCA+EstEmp + CDI+
IBC,
data = scaled_train,
hidden =  6,
linear.output = TRUE,
algorithm="backprop",
learningrate=0.01,
rep=100)
nn.bp <- neuralnet(GasolNaBomba~Dolar+CtBarril + PCTribEst +Etanol+ IPCA+EstEmp + CDI+
IBC,
data = scaled_train,
hidden =  6,
linear.output = TRUE,
algorithm="backprop",
learningrate=0.01,
rep=5)
nn.bp <- neuralnet(GasolNaBomba~Dolar+CtBarril + PCTribEst +Etanol+ IPCA+EstEmp + CDI+
IBC,
data = scaled_train,
hidden =  6,
linear.output = TRUE,
algorithm="backprop",
learningrate=0.01,
rep=20)
plot(nn.bp)
pr.nn <- compute(nn,scaled_test )
pr.nn.bp <- compute(nn.bp,scaled_test )
result2<-pr.nn.bp$net.result*(max(training$GasolNaBomba) - min(training$GasolNaBomba) ) + min(training$GasolNaBomba)
result2
nn.bp.forecast =  MAPE(result2, test[,"GasolNaBomba"]) * 100 #3.68 %
nn.bp.forecast
result2_ts<- ts(result2, start = c(2020,07), end=c(2020,10), freq=12)
#plot previsao
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Previsao do preco da gasolina com RNN", type='l')
lines(result2_ts,  col="red", lwd=2)
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Previsao do preco da gasolina com RNN", type='l')
lines(result_ts,  col="red", lwd=2)
#plot previsao
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Previsao do preco da gasolina com RNN", type='l')
lines(result_ts,  col="red", lwd=2)
result_ts<- ts(result, start = c(2020,07), end=c(2020,10), freq=12)
#plot previsao
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Previsao do preco da gasolina com RNN", type='l')
lines(result_ts,  col="red", lwd=2)
#plot previsao
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Previsao do preco da gasolina com RNN com back propagation", type='l')
lines(result2_ts,  col="red", lwd=2)
#plot FIT
plot(y_train, col="blue", xlab="Ano", ylab="R$", main="Previsao do preco da gasolina com RNN", type='l')
lines(result_ts,  col="red", lwd=2)
#plot FIT
plot(pr.nn, col="blue", xlab="Ano", ylab="R$", main="Previsao do preco da gasolina com RNN", type='l')
lines(result_ts,  col="red", lwd=2)
#plot previsao NN
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Previsao do preco da gasolina com RNN", type='l')
lines(result_ts,  col="red", lwd=2)
#plot previsao NN backprop
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Previsao do preco da gasolina com RNN com back propagation", type='l')
lines(result2_ts,  col="red", lwd=2)
nn.bp <- neuralnet(GasolNaBomba~Dolar+CtBarril + PCTribEst +Etanol+ IPCA+EstEmp + CDI+
IBC,
data = scaled_train,
hidden =  6,
linear.output = TRUE,
algorithm="backprop",
learningrate=0.01,
rep=20)
nn.bp.f <-nn.bp
pr.nn.bp <- compute(nn.bp,scaled_train )
#revertendo o scale
result2<-pr.nn.bp$net.result*(max(df_final$GasolNaBomba) - min(df_final$GasolNaBomba) ) + min(df_final$GasolNaBomba)
result2
#plot previsao NN backprop
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Previsao do preco da gasolina com RNN com back propagation", type='l')
lines(result2,  col="red", lwd=2)
#plot previsao NN backprop
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Previsao do preco da gasolina com RNN com back propagation", type='l')
lines(result2,  col="red", lwd=2)
lines(result2,  col="red", lwd=2)
pr.nn.bp
pr.nn.bp <- compute(nn.bp.f,scaled_train )
result2<-pr.nn.bp$net.result*(max(df_final$GasolNaBomba) - min(df_final$GasolNaBomba) ) + min(df_final$GasolNaBomba)
result2
result2
pr.nn.bp$net.result
#plot previsao NN backprop
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Previsao do preco da gasolina com RNN com back propagation", type='l')
lines(pr.nn.bp$net.result,  col="red", lwd=2)
result_ts<- ts(result2, start = c(2020,07), end=c(2020,10), freq=12)
# Predict
pr.nn.bp <- compute(nn.bp.f,scaled_train )
#revertendo o scale
result_ts_bp<-pr.nn.bp$net.result*(max(df_final$GasolNaBomba) - min(df_final$GasolNaBomba) ) + min(df_final$GasolNaBomba)
result_ts_bp
#plot previsao NN backprop
result_ts_bp<- ts(result_ts_bp, start = c(2020,07), end=c(2020,10), freq=12)
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Previsao do preco da gasolina com RNN com back propagation", type='l')
lines(result_ts_bp,  col="red", lwd=2)
pr.nn.bp$net.result
plot(pr.nn.bp$net.result)
plot(result_ts_bp)
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Previsao do preco da gasolina com RNN com back propagation", type='l')
lines(result_ts_bp,  col="red", lwd=2)
df_ts[,"GasolNaBomba"]
#plot previsao NN backprop
result_ts_bp<- ts(result_ts_bp, start = c(2018,07), end=c(2020,10), freq=12)
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Previsao do preco da gasolina com RNN com back propagation", type='l')
lines(result_ts_bp,  col="red", lwd=2)
#plot previsao NN backprop
result_ts_bp<- ts(result_ts_bp, start = c(2018,07), end=c(2021,1), freq=12)
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Previsao do preco da gasolina com RNN com back propagation", type='l')
lines(result_ts_bp,  col="red", lwd=2)
#plot previsao NN backprop
result_ts_bp<- ts(result_ts_bp, start = c(2018,07), end=c(2021,6), freq=12)
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Previsao do preco da gasolina com RNN com back propagation", type='l')
lines(result_ts_bp,  col="red", lwd=2)
plot(result_ts_bp, col="red", xlab="Ano", ylab="R$", main="Previsao do preco da gasolina com RNN com back propagation", type='l')
lines(df_ts[,"GasolNaBomba"],  col="blue", lwd=2)
plot(result_ts_bp, col="blue", xlab="Ano", ylab="R$", main="Previsao do preco da gasolina com RNN com back propagation", type='l')
lines(df_ts[,"GasolNaBomba"],  col="red", lwd=2)
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Previsao do preco da gasolina com RNN com back propagation", type='l')
lines(result_ts_bp,  col="red", lwd=2)
result_ts_bp
result_ts_bp$pred
forecast(result_ts_bp, n = 12)
plot(result_ts_bp)
grid(col='darkgrey',
lwd=2)
plot(result_ts_bp)
grid(col='darkgrey',
lwd=2)
plot(result_ts_bp)
#plot
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Seasonal Naive Forecast", type='l')
lines(naive$mean, col="red", lwd=2)
grid(col='darkgrey',
lwd=2)
#plot
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Seasonal Naive Forecast", type='l')
lines(naive$mean, col="red", lwd=2)
grid(col='darkgrey',
lwd=2)
naive = snaive(y_train, h=4)
#avaliacao
MAPE(naive$mean, y_test) * 100 #  1.57% de erro
#plot
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Seasonal Naive Forecast", type='l')
lines(naive$mean, col="red", lwd=2)
grid(col='darkgrey',
lwd=2)
naive = snaive(y_train, h=4)
#avaliacao
MAPE(naive$mean, y_test) * 100 #  1.57% de erro
#plot
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Seasonal Naive Forecast", type='l')
lines(naive$mean, col="red", lwd=2)
? neuralnet(
? neuralnet
?neuralnet
?neuralnet
y_train
MAPE(naive$mean, y_test) * 100 #  1.57% de erro
naive = snaive(y_train, h=4)
#avaliacao
MAPE(naive$mean, y_test) * 100 #  1.57% de erro
#plot
plot(df_ts[,"GasolNaBomba"], col="blue", xlab="Ano", ylab="R$", main="Seasonal Naive Forecast", type='l')
