library(xlsx)
df2 <- read.xlsx("UrbanPop.xlsx", sheetIndex = 1)
df2
# Pacote gdata
detach(package:xlsx)
library(gdata)
arq1 <- xls2csv("planilha1.xlsx",
sheet = 1,
na.strings = "EMPTY")
arq1
read.csv(arq1)
library(readr)
# RMongoDB
# Instalação do Pacote
install.packages("devtools")
install_github("mongosoup/rmongodb", force = TRUE)
install_github("mongosoup/rmongodb", force = TRUE)
# RMongoDB
# Instalação do Pacote
install.packages("devtools")
library("devtools")
install_github("mongosoup/rmongodb", force = TRUE)
library(rmongodb)
# Criando a conexão
help("mongo.create")
mongo <- mongo.create()
mongo
# Checando a conexão
mongo.is.connected(mongo)
mongo.get.databases(mongo)
if(mongo.is.connected(mongo) == TRUE) {
mongo.get.databases(mongo)
}
# Armazenando o nome de uma das coleções
coll <- "users.contatos"
# Contando os registros em uma coleção
help("mongo.count")
mongo.count(mongo, coll)
# Buscando um registro em uma coleção
mongo.find.one(mongo, coll)
# Obtendo um vetor de valores distintos das chaves de uma coleção
res <- mongo.distinct(mongo, coll, "city")
head(res)
# Obtendo um vetor de valores distintos das chaves de uma coleção
# E gerando um histograma
pop <- mongo.distinct(mongo, coll, "pop")
hist(pop)
# Contando os elementos
nr <- mongo.count(mongo, coll, list('pop' = list('$lte' = 2)))
print( nr )
# Buscando todos os elementos
pops <- mongo.find.all(mongo, coll, list('pop' = list('$lte' = 2)))
head(pops, 2)
# Buscando todos os elementos
pops <- mongo.find.all(mongo, coll, list('pop' = list('$lte' = 2)))
head(pops, 2)
# Encerrando a conexão
mongo.destroy(mongo)
# Criando e validando um arquivo json
library(jsonlite)
json_arquivo <- '{"pop":{"$lte":2}, "pop":{"$gte":1}}'
cat(prettify(json_arquivo))
validate(json_arquivo)
R.Version()
install.packages('rlang')
library(dplyr)
library(hrbrthemes)
library(ggplot2)
df_cdi <-read.csv("IBC.csv",sep = ";",dec = ",")
setwd("E:/Estudos/Trabalho_Bloco_A")
getwd()
library(dplyr)
library(rJava)
library(readxl)
library(tidyr) #adc por felipe para transpor a coluna em varias colunas
library(ggplot2)
library(Rfast)
library(tidyverse)
df_cdi <-read.csv("IBC.csv",sep = ";",dec = ",")
View(df_cdi)
df_ibc<-read.csv("IBC.csv",sep = ";",dec = ",")
View(df_ibc)
View(df_ibc)
df_EEF=df_EEF[-c(26),]
View(df_ibc)
names(df_cdi)[2] <- "IBC"
View(df_ibc)
df_ibc=df_ibc[-c(26),]
names(df_cdi)[2] <- "IBC"
View(df_ibc)
names(df_ibc)[2] <- "IBC"
View(df_ibc)
names(df_ibc)[2] <- "IBC"
df_ibc$Data <- strptime(paste('01',df_ibc$Data, sep="/"), format= "%d/%m/%Y")
format(df_ibc$Data, format="%Y-%m-%d")
df_ibc$Data<- as.character(df_ibc$Data)
df_ibc$mes<-substr(df_ibc$Data,1,7)
df_ibc=df_ibc[-c(1)]
View(df_ibc)
View(df_ibc)
df_total <- read.csv("df_final.csv")
str(df_total)
df_total=df_total[-1]
str(df_total)
write.csv(df_total, "df_final.csv",row.names=FALSE)
df_total <- read.csv("df_final.csv")
str(df_total)
df_pim_pf <-read_excel("PIM_PF.xlsx", sheet = 1)
View(df_pim_pf)
#dropa lixo das primeiras 3 linhas
df_pim_pf=df_pim_pf[-c(1,2,3),]
df_pim_pf=df_pim_pf[-c(26),]
df_pim_pf=df_pim_pf[-c(2)]
names(df_pim_pf)[1] <- "Data"
names(df_pim_pf)[2] <- "PIM"
#trata a data para ser igual as outras
df_pim_pf<-df_pim_pf %>%
mutate(Data = str_replace_all(Data, c("janeiro" = "01 01","fevereiro" = "01 02","março" = "01 03","abril" = "01 04","maio"="01 05","junho"="01 06","julho"="01 07","agosto"="01 08","setembro"="01 09","outubro"="01 10","novembro"="01 11","dezembro"="01 12")))
df_pim_pf$Data <- strptime(df_pim_pf$Data, format= "%d %m %Y")
format(df_pim_pf$Data, format="%Y-%m-%d")
df_pim_pf$Data<- as.character(df_pim_pf$Data)
df_pim_pf$mes<-substr(df_pim_pf$Data,1,7)
df_pim_pf=df_pim_pf[-c(1)]
df_final2 <- df_final %>% inner_join(df_pim_pf, by=c("mes"))
df_total <- read.csv("df_final.csv")
df_total2 <- df_total %>% inner_join(df_pim_pf, by=c("mes"))
View(df_total2)
df_EEF <- read.csv2("Estoque_Empregos_Formais.csv")
View(df_EEF)
df_EEF=df_EEF[-c(26),]
names(df_EEF)[2] <- "Estoque_Empregos"
df_EEF$Data <- strptime(paste('01',df_EEF$Data, sep="/"), format= "%d/%m/%Y")
format(df_EEF$Data, format="%Y-%m-%d")
df_EEF$Data<- as.character(df_EEF$Data)
df_EEF$mes<-substr(df_EEF$Data,1,7)
df_EEF=df_EEF[-c(1)]
df_total3 <- df_total2 %>% inner_join(df_EEF, by=c("mes"))
View(df_total2)
View(df_EEF)
View(df_EEF)
View(df_total3)
df_cdi <-read.csv("CDI.csv",sep = "\t",dec = ",")
View(df_cdi)
names(df_cdi)[2] <- "N.Operacoes"
names(df_cdi)[4] <- "Media"
names(df_cdi)[5] <- "Fator.Diario"
df_cdi$Data <- strptime(df_cdi$Data, format= "%d/%m/%Y")
format(df_cdi$Data, format="%Y-%m-%d")
df_cdi$Data<- as.character(df_cdi$Data)
df_cdi$mes<-substr(df_cdi$Data,1,7)
df_cdi2=df_cdi[-c(1,2,3,5,6)]
View(df_cdi2)
df_cdi3=df_cdi2%>%group_by(mes)%>%summarize(mediaCDI=mean(Media))
View(df_cdi3)
df_cdi <-read.csv("CDI.csv",sep = "\t",dec = ",")
names(df_cdi)[2] <- "N.Operacoes"
names(df_cdi)[4] <- "Media"
names(df_cdi)[5] <- "Fator.Diario"
df_cdi$Data <- strptime(df_cdi$Data, format= "%d/%m/%Y")
format(df_cdi$Data, format="%Y-%m-%d")
df_cdi$Data<- as.character(df_cdi$Data)
df_cdi$mes<-substr(df_cdi$Data,1,7)
df_cdi2=df_cdi[-c(1,2,3,5,6)]
df_cdi3=df_cdi2%>%group_by(mes)%>%summarize(mediaCDI=mean(Media))
df_total4 <- df_total3 %>% inner_join(df_cdi3, by=c("mes"))
View(df_total4)
df_ibc<-read.csv("IBC.csv",sep = ";",dec = ",")
View(df_ibc)
df_ibc=df_ibc[-c(26),]
names(df_ibc)[2] <- "IBC"
df_ibc$Data <- strptime(paste('01',df_ibc$Data, sep="/"), format= "%d/%m/%Y")
format(df_ibc$Data, format="%Y-%m-%d")
df_ibc$Data<- as.character(df_ibc$Data)
df_ibc$mes<-substr(df_ibc$Data,1,7)
df_ibc=df_ibc[-c(1)]
df_total5 <- df_total4 %>% inner_join(df_ibc, by=c("mes"))
View(df_total5)
View(df_total5)
write.csv(df_total5, "df_final.csv",row.names=FALSE)
df_mr <-read_excel("MassaRendimento.xlsx", sheet = 1)
View(df_mr)
df_ibc=df_ibc[-c(1,2,5),]
View(df_mr)
df_mr=df_mr[-c(1,2,5),]
View(df_mr)
df_mr_transpose <- as.data.frame(t(as.matrix(df_mr)))
View(df_mr_transpose)
names(df_mr_transpose)[1] <- "Data"
names(df_mr_transpose)[2] <- "MassaRendimento"
df_mr_transpose=df_mr_transpose[-c(1),]
View(df_mr_transpose)
?tokenize
df_impostos <-read_excel("ImpostosPrecoGasolina_ConsolidadoTratado.xlsx", sheet = 1)
install.packages('quanteda')
library(quanteda)
?token
?tokens
tokens('xxxyxxx',what='y')
tokens('xxx yxxx',what='fasterword')
df_mr_transpose$Data%>%tokens(what='fasterword')
df_mr_transpose$Data[1]
?strsplit
